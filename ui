local ModernUI = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Constants
local TWEEN_SPEED = 0.15
local CORNER_RADIUS = UDim.new(0, 8)
local DEFAULT_FONT = Enum.Font.GothamBold
local COLORS = {
    Background = Color3.fromRGB(20, 20, 25),
    TabBackground = Color3.fromRGB(25, 25, 30),
    Accent = Color3.fromRGB(114, 137, 218), -- Discord-like blue
    Text = Color3.fromRGB(255, 255, 255),
    SubText = Color3.fromRGB(185, 185, 185),
    Secondary = Color3.fromRGB(35, 35, 40),
    Disabled = Color3.fromRGB(60, 60, 65),
    Success = Color3.fromRGB(67, 181, 129),
    Warning = Color3.fromRGB(240, 171, 0),
    Error = Color3.fromRGB(240, 71, 71)
}

local ICONS = {
    Home = "rbxassetid://11293977875",
    Visuals = "rbxassetid://11293978542",
    Settings = "rbxassetid://11293978091",
    Combat = "rbxassetid://11293977657",
    Player = "rbxassetid://11293978321",
    World = "rbxassetid://11293978752",
    Info = "rbxassetid://11293977994",
    Close = "rbxassetid://11293977762"
}

function ModernUI:CreateWindow(title)
    local Window = {}
    local tabs = {}
    local currentTab = nil

    -- Create ScreenGui
    local gui = Instance.new("ScreenGui")
    gui.Name = "ModernUI"
    gui.ResetOnSpawn = false
    gui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 800, 0, 500)
    mainFrame.Position = UDim2.new(0.5, -400, 0.5, -250)
    mainFrame.BackgroundColor3 = COLORS.Background
    mainFrame.Parent = gui

    -- Add corner radius and shadow
    local corner = Instance.new("UICorner")
    corner.CornerRadius = CORNER_RADIUS
    corner.Parent = mainFrame

    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    shadow.BackgroundTransparency = 1
    shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    shadow.Size = UDim2.new(1, 47, 1, 47)
    shadow.ZIndex = 0
    shadow.Image = "rbxassetid://6015897843"
    shadow.ImageColor3 = Color3.new(0, 0, 0)
    shadow.ImageTransparency = 0.5
    shadow.Parent = mainFrame

    -- Tab Container (Left Side)
    local tabContainer = Instance.new("Frame")
    tabContainer.Name = "TabContainer"
    tabContainer.Size = UDim2.new(0, 60, 1, 0)
    tabContainer.BackgroundColor3 = COLORS.TabBackground
    tabContainer.Parent = mainFrame

    local tabCorner = Instance.new("UICorner")
    tabCorner.CornerRadius = CORNER_RADIUS
    tabCorner.Parent = tabContainer

    -- Tab List
    local tabList = Instance.new("UIListLayout")
    tabList.Padding = UDim.new(0, 10)
    tabList.HorizontalAlignment = Enum.HorizontalAlignment.Center
    tabList.Parent = tabContainer

    -- Content Frame (Right Side)
    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "ContentFrame"
    contentFrame.Size = UDim2.new(1, -70, 1, -10)
    contentFrame.Position = UDim2.new(0, 65, 0, 5)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = mainFrame

    -- Create Tab function
    function Window:CreateTab(name, icon)
        local tab = {}
        local isSelected = #tabs == 0

        -- Tab Button
        local tabButton = Instance.new("ImageButton")
        tabButton.Name = name .. "Tab"
        tabButton.Size = UDim2.new(0, 40, 0, 40)
        tabButton.BackgroundColor3 = isSelected and COLORS.Accent or COLORS.TabBackground
        tabButton.Position = UDim2.new(0, 10, 0, 10 + (#tabs * 50))
        tabButton.AutoButtonColor = false
        tabButton.Parent = tabContainer

        local tabCorner = Instance.new("UICorner")
        tabCorner.CornerRadius = UDim.new(0, 8)
        tabCorner.Parent = tabButton

        local tabIcon = Instance.new("ImageLabel")
        tabIcon.Size = UDim2.new(0, 24, 0, 24)
        tabIcon.Position = UDim2.new(0.5, -12, 0.5, -12)
        tabIcon.BackgroundTransparency = 1
        tabIcon.Image = icon or ICONS[name] or ICONS.Info
        tabIcon.ImageColor3 = isSelected and COLORS.Text or COLORS.SubText
        tabIcon.Parent = tabButton

        -- Content Frame for this tab
        local contentContainer = Instance.new("ScrollingFrame")
        contentContainer.Name = name .. "Content"
        contentContainer.Size = UDim2.new(1, 0, 1, 0)
        contentContainer.BackgroundTransparency = 1
        contentContainer.ScrollBarThickness = 4
        contentContainer.ScrollBarImageColor3 = COLORS.Accent
        contentContainer.Visible = isSelected
        contentContainer.Parent = contentFrame

        local contentList = Instance.new("UIListLayout")
        contentList.Padding = UDim.new(0, 10)
        contentList.Parent = contentContainer

        -- Tab Selection Logic
        tabButton.MouseButton1Click:Connect(function()
            if currentTab then
                TweenService:Create(currentTab.button, TweenInfo.new(TWEEN_SPEED), {
                    BackgroundColor3 = COLORS.TabBackground
                }):Play()
                TweenService:Create(currentTab.icon, TweenInfo.new(TWEEN_SPEED), {
                    ImageColor3 = COLORS.SubText
                }):Play()
                currentTab.content.Visible = false
            end

            TweenService:Create(tabButton, TweenInfo.new(TWEEN_SPEED), {
                BackgroundColor3 = COLORS.Accent
            }):Play()
            TweenService:Create(tabIcon, TweenInfo.new(TWEEN_SPEED), {
                ImageColor3 = COLORS.Text
            }):Play()
            contentContainer.Visible = true

            currentTab = {
                button = tabButton,
                icon = tabIcon,
                content = contentContainer
            }
        end)

        -- Element Creation Functions
        function tab:CreateButton(text, callback)
            local button = Instance.new("TextButton")
            button.Name = "Button"
            button.Size = UDim2.new(1, -20, 0, 40)
            button.Position = UDim2.new(0, 10, 0, 0)
            button.BackgroundColor3 = COLORS.Secondary
            button.Text = text
            button.TextColor3 = COLORS.Text
            button.Font = DEFAULT_FONT
            button.TextSize = 14
            button.Parent = contentContainer

            local buttonCorner = Instance.new("UICorner")
            buttonCorner.CornerRadius = UDim.new(0, 6)
            buttonCorner.Parent = button

            button.MouseEnter:Connect(function()
                TweenService:Create(button, TweenInfo.new(TWEEN_SPEED), {
                    BackgroundColor3 = COLORS.Accent
                }):Play()
            end)

            button.MouseLeave:Connect(function()
                TweenService:Create(button, TweenInfo.new(TWEEN_SPEED), {
                    BackgroundColor3 = COLORS.Secondary
                }):Play()
            end)

            button.MouseButton1Click:Connect(callback)
            return button
        end

        function tab:CreateToggle(text, default, callback)
            local toggleFrame = Instance.new("Frame")
            toggleFrame.Name = "Toggle"
            toggleFrame.Size = UDim2.new(1, -20, 0, 40)
            toggleFrame.Position = UDim2.new(0, 10, 0, 0)
            toggleFrame.BackgroundColor3 = COLORS.Secondary
            toggleFrame.Parent = contentContainer

            local toggleCorner = Instance.new("UICorner")
            toggleCorner.CornerRadius = UDim.new(0, 6)
            toggleCorner.Parent = toggleFrame

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, -60, 1, 0)
            label.Position = UDim2.new(0, 10, 0, 0)
            label.BackgroundTransparency = 1
            label.Text = text
            label.TextColor3 = COLORS.Text
            label.Font = DEFAULT_FONT
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = toggleFrame

            local toggle = Instance.new("Frame")
            toggle.Size = UDim2.new(0, 40, 0, 20)
            toggle.Position = UDim2.new(1, -50, 0.5, -10)
            toggle.BackgroundColor3 = default and COLORS.Success or COLORS.Disabled
            toggle.Parent = toggleFrame

            local toggleCorner = Instance.new("UICorner")
            toggleCorner.CornerRadius = UDim.new(1, 0)
            toggleCorner.Parent = toggle

            local indicator = Instance.new("Frame")
            indicator.Size = UDim2.new(0, 16, 0, 16)
            indicator.Position = UDim2.new(default and 1 or 0, default and -18 or 2, 0.5, -8)
            indicator.BackgroundColor3 = COLORS.Text
            indicator.Parent = toggle

            local indicatorCorner = Instance.new("UICorner")
            indicatorCorner.CornerRadius = UDim.new(1, 0)
            indicatorCorner.Parent = indicator

            local enabled = default
            toggleFrame.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    enabled = not enabled
                    TweenService:Create(toggle, TweenInfo.new(TWEEN_SPEED), {
                        BackgroundColor3 = enabled and COLORS.Success or COLORS.Disabled
                    }):Play()
                    TweenService:Create(indicator, TweenInfo.new(TWEEN_SPEED), {
                        Position = enabled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
                    }):Play()
                    callback(enabled)
                end
            end)

            return toggleFrame
        end

        function tab:CreateSlider(text, min, max, default, callback)
            local sliderFrame = Instance.new("Frame")
            sliderFrame.Name = "Slider"
            sliderFrame.Size = UDim2.new(1, -20, 0, 60)
            sliderFrame.BackgroundColor3 = COLORS.Secondary
            sliderFrame.Parent = contentContainer

            local sliderCorner = Instance.new("UICorner")
            sliderCorner.CornerRadius = UDim.new(0, 6)
            sliderCorner.Parent = sliderFrame

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, -20, 0, 20)
            label.Position = UDim2.new(0, 10, 0, 5)
            label.BackgroundTransparency = 1
            label.Text = text
            label.TextColor3 = COLORS.Text
            label.Font = DEFAULT_FONT
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = sliderFrame

            local valueLabel = Instance.new("TextLabel")
            valueLabel.Size = UDim2.new(0, 50, 0, 20)
            valueLabel.Position = UDim2.new(1, -60, 0, 5)
            valueLabel.BackgroundTransparency = 1
            valueLabel.Text = tostring(default)
            valueLabel.TextColor3 = COLORS.Text
            valueLabel.Font = DEFAULT_FONT
            valueLabel.TextSize = 14
            valueLabel.Parent = sliderFrame

            local sliderBG = Instance.new("Frame")
            sliderBG.Name = "SliderBG"
            sliderBG.Size = UDim2.new(1, -20, 0, 4)
            sliderBG.Position = UDim2.new(0, 10, 0, 35)
            sliderBG.BackgroundColor3 = COLORS.Disabled
            sliderBG.Parent = sliderFrame

            local sliderBGCorner = Instance.new("UICorner")
            sliderBGCorner.CornerRadius = UDim.new(1, 0)
            sliderBGCorner.Parent = sliderBG

            local sliderFill = Instance.new("Frame")
            sliderFill.Name = "SliderFill"
            sliderFill.Size = UDim2.new((default - min)/(max - min), 0, 1, 0)
            sliderFill.BackgroundColor3 = COLORS.Accent
            sliderFill.Parent = sliderBG

            local sliderFillCorner = Instance.new("UICorner")
            sliderFillCorner.CornerRadius = UDim.new(1, 0)
            sliderFillCorner.Parent = sliderFill

            local function updateSlider(input)
                local pos = math.clamp((input.Position.X - sliderBG.AbsolutePosition.X) / sliderBG.AbsoluteSize.X, 0, 1)
                local value = math.floor(min + (max - min) * pos)
                TweenService:Create(sliderFill, TweenInfo.new(TWEEN_SPEED), {
                    Size = UDim2.new(pos, 0, 1, 0)
                }):Play()
                valueLabel.Text = tostring(value)
                callback(value)
            end

            sliderBG.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    updateSlider(input)
                    local connection
                    connection = UserInputService.InputChanged:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseMovement then
                            updateSlider(input)
                        end
                    end)
                    UserInputService.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            if connection then
                                connection:Disconnect()
                            end
                        end
                    end)
                end
            end)

            return sliderFrame
        end

        -- Add tab to tabs table
        table.insert(tabs, tab)
        if isSelected then
            currentTab = {
                button = tabButton,
                icon = tabIcon,
                content = contentContainer
            }
        end

        return tab
    end

    -- Make window draggable
    local dragging = false
    local dragStart = nil
    local startPos = nil

    mainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    return Window
end

return ModernUI
